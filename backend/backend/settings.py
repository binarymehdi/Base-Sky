"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8702=*jixhy*mop*-#ka2dx@nhwj8%8x0_sr=ii2ga9wvzcssl'

# SECURITY WARNING: don't run with debug turned on in production!
if os.getenv('DJANGO_DEBUG') is not None and os.getenv('DJANGO_DEBUG') == 'True':
    DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
if os.getenv('DJANGO_ALLOWED_HOSTS') is not None and os.getenv('DJANGO_ALLOWED_HOSTS') != "":
    ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'api.apps.ApiConfig'
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

from datetime import timedelta
 
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,
 
    'ALGORITHM': 'HS256',
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
 
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
 
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
 
    'JTI_CLAIM': 'jti',
 
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if( os.getenv('DJANGO_EXTERNAL_DB') is None ):
    print("Using local SQLite database")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    print("Using PostgreSQL database")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('POSTGRESQL_DBNAME'),
            'USER': os.getenv('POSTGRESQL_USER'),
            'PASSWORD': None,
            'HOST': os.getenv('POSTGRESQL_HOST'),
            'PORT': os.getenv('POSTGRESQL_PORT'),
            'OPTIONS': {'sslmode': 'require'},
        }
    }
    try:
        with open('/mnt/secrets-store/POSTGRESQL-PASSWORD') as f:
            DATABASES['default']['PASSWORD']=f.read()
    except:
        DATABASES['default']['PASSWORD']=os.getenv('POSTGRESQL_PASSWORD')

AUTH_USER_MODEL = 'api.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

if os.getenv('DJANGO_STATIC_URL') is not None:
    STATIC_URL = os.getenv('DJANGO_STATIC_URL')
else:
    STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = False
if os.getenv('DJANGO_CORS_ALLOW_ALL_ORIGINS') is not None:
    CORS_ALLOW_ALL_ORIGINS = True

WEB_SITE_NAME=os.getenv('DJANGO_WEB_SITE_NAME')
VERIFICATION_URL=os.getenv('DJANGO_VERIFICATION_URL')
EMAIL_HOST = os.getenv('DJANGO_EMAIL_HOST')
EMAIL_PORT = os.getenv('DJANGO_EMAIL_PORT')
EMAIL_USE_TLS = True
RESET_PASSWORD_URL=os.getenv('DJANGO_RESET_PASSWORD_URL')


try:
    with open('/mnt/secrets-store/DJANGO-SENDER-EMAIL') as f:
        SENDER_EMAIL = f.read()
except:
    SENDER_EMAIL = os.getenv('DJANGO_SENDER_EMAIL')
 
try:
    with open('/mnt/secrets-store/DJANGO-EMAIL-HOST-USER') as f:
        EMAIL_HOST_USER = f.read()
except:
    EMAIL_HOST_USER = os.getenv('DJANGO_EMAIL_HOST_USER')
 
try:
    with open('/mnt/secrets-store/DJANGO-EMAIL-HOST-PASSWORD') as f:
        EMAIL_HOST_PASSWORD = f.read()
except:
    EMAIL_HOST_PASSWORD = os.getenv('DJANGO_EMAIL_HOST_PASSWORD')

print("Settings:")
print(f"CORS_ALLOW_ALL_ORIGINS: {CORS_ALLOW_ALL_ORIGINS}")
print(f"WEB_SITE_NAME: {WEB_SITE_NAME}")
print(f"VERIFICATION_URL: {VERIFICATION_URL}")
print(f"STATIC_URL: {STATIC_URL}")
print(f"RESET_PASSWORD_URL: {RESET_PASSWORD_URL}")
print(f"EMAIL_HOST: {EMAIL_HOST}")
print(f"EMAIL_PORT: {EMAIL_PORT}")
print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")
if os.getenv('DJANGO_CORS_ALLOWED_ORIGINS') is not None and os.getenv('DJANGO_CORS_ALLOWED_ORIGINS') != "":
    CORS_ALLOWED_ORIGINS = os.getenv('DJANGO_CORS_ALLOWED_ORIGINS').split(',')
    print(f"CORS_ALLOWED_ORIGINS: {CORS_ALLOWED_ORIGINS}")