# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '9e7ff68f-1ad2-4ddd-b903-563f1803c2f8'
  imageRepository: 'rdbw-frontend'
  containerRegistry: 'cud64hfcidjdbvi9gjh4d.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile.frontend'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-18.04'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        cd frontend; npm install; CI=true npm run test
      displayName: "Frontend tests"
    - task: Docker@2
      displayName: Build frontend image
      inputs:
        containerRegistry: 'cud64hfcidjdbvi9gjh4d'
        repository: 'rdbw-frontend'
        command: 'build'
        Dockerfile: '**/Dockerfile.frontend'
        tags: |
          $(Build.BuildId)
          latest
    - task: Docker@2
      displayName: Push frontend image to ACR
      inputs:
        containerRegistry: 'cud64hfcidjdbvi9gjh4d'
        repository: 'rdbw-frontend'
        command: 'push'
        tags: |
          $(Build.BuildId)
          latest
    - task: Docker@2
      displayName: Build backend image
      inputs:
        containerRegistry: 'cud64hfcidjdbvi9gjh4d'
        repository: 'rdbw-backend'
        command: 'build'
        Dockerfile: '**/Dockerfile.backend'
        tags: |
          $(Build.BuildId)
          latest
    - script: |
        docker images
        docker run --rm --name test1 $(containerRegistry)/rdbw-backend bash -c "python manage.py test"
      displayName: "Backend tests"
    - task: Docker@2
      displayName: Push backend image to ACR
      inputs:
        containerRegistry: 'cud64hfcidjdbvi9gjh4d'
        repository: 'rdbw-backend'
        command: 'push'
        tags: |
          $(Build.BuildId)
          latest
    - task: Docker@2
      displayName: Build backend static image
      inputs:
        containerRegistry: 'cud64hfcidjdbvi9gjh4d'
        repository: 'rdbw-backend-static'
        command: 'build'
        Dockerfile: '**/Dockerfile.backend.static'
        tags: |
          $(Build.BuildId)
          latest
    - task: Docker@2
      displayName: Push backend static image to ACR
      inputs:
        containerRegistry: 'cud64hfcidjdbvi9gjh4d'
        repository: 'rdbw-backend-static'
        command: 'push'
        tags: |
          $(Build.BuildId)
          latest
    - task: KubernetesManifest@0
      displayName: Deploy the frontend ConfigMap
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'aksNonProd01_service_connection'
        namespace: 'rdbw-dev'
        manifests: '$(Build.SourcesDirectory)/deployments/dev.frontend.configmap.yaml'
    - task: KubernetesManifest@0
      displayName: Deploy secret provider class
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'aksNonProd01_service_connection'
        namespace: 'rdbw-dev'
        manifests: '$(Build.SourcesDirectory)/deployments/dev.secretproviderclass.yaml'
    - task: Kubernetes@1
      displayName: Delete existing backend static app
      continueOnError: true
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'aksNonProd01_service_connection'
        namespace: 'rdbw-dev'
        command: 'delete'
        useConfigurationFile: true
        configuration: '$(Build.SourcesDirectory)/deployments/dev.backend-static.yaml'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    - task: KubernetesManifest@0
      displayName: Deploy backend static app
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'aksNonProd01_service_connection'
        namespace: 'rdbw-dev'
        manifests: '$(Build.SourcesDirectory)/deployments/dev.backend-static.yaml'
    - task: KubernetesManifest@0
      displayName: Deploy the backend static ingress
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'aksNonProd01_service_connection'
        namespace: 'rdbw-dev'
        manifests: '$(Build.SourcesDirectory)/deployments/dev.backend-static.ingress.yaml'
    - task: Kubernetes@1
      displayName: Delete existing backend app
      continueOnError: true
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'aksNonProd01_service_connection'
        namespace: 'rdbw-dev'
        command: 'delete'
        useConfigurationFile: true
        configuration: '$(Build.SourcesDirectory)/deployments/dev.backend.yaml'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    - task: KubernetesManifest@0
      displayName: Deploy backend app
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'aksNonProd01_service_connection'
        namespace: 'rdbw-dev'
        manifests: '$(Build.SourcesDirectory)/deployments/dev.backend.yaml'
    - task: KubernetesManifest@0
      displayName: Deploy the backend ingress
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'aksNonProd01_service_connection'
        namespace: 'rdbw-dev'
        manifests: '$(Build.SourcesDirectory)/deployments/dev.backend.ingress.yaml'
    - task: Kubernetes@1
      displayName: Delete existing frontend app
      continueOnError: true
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'aksNonProd01_service_connection'
        namespace: 'rdbw-dev'
        command: 'delete'
        useConfigurationFile: true
        configuration: '$(Build.SourcesDirectory)/deployments/dev.frontend.yaml'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    - task: KubernetesManifest@0
      displayName: Deploy frontend app
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'aksNonProd01_service_connection'
        namespace: 'rdbw-dev'
        manifests: '$(Build.SourcesDirectory)/deployments/dev.frontend.yaml'
    - task: KubernetesManifest@0
      displayName: Deploy the frontend ingress
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'aksNonProd01_service_connection'
        namespace: 'rdbw-dev'
        manifests: '$(Build.SourcesDirectory)/deployments/dev.frontend.ingress.yaml'